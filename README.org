* Snow
  静态博客生成器

** 快速开始
   #+begin_example
     └──╼ ./snow --help
     NAME:
        snow - snow is a static site generator.

     USAGE:
        snow [global options] command [command options] [arguments...]

     VERSION:
        0.1.0

     COMMANDS:
        init     init a new site
        build    build and output
        server   server local files
        help, h  Shows a list of commands or help for one command

     GLOBAL OPTIONS:
        --conf FILE, -c FILE  load configuration from FILE (default: "config.yaml")
        --help, -h            show help (default: false)
        --version, -v         print the version (default: false)
   #+end_example
*** 创建新的站点
    #+begin_example
      ──╼ ./snow init
      Welcome to snow 0.1.0.
      > Where do you want to create your new web site? [.] example.com
      > What will be the title of this web site? [snow]
      > Who will be the author of this web site?
      The input is required
      > Who will be the author of this web site? aaa
      > What is your URL prefix? (no trailing slash) [http://127.0.0.1:8000]
      > Do you want to create first page? [Y/n] y
    #+end_example

*** 编译和预览
    #+begin_example
      └──╼ cd example.com
      └──╼ ../snow server -D
      DEBU Copying @theme/static/css/main.css to output/static/css/main.css
      INFO Done: Static Processed 1 static files in 331.023µs
      DEBU Writing output/authors/index.html
      DEBU Writing output/authors/snow/index.html
      DEBU Writing output/tags/index.html
      DEBU Writing output/tags/linux/index.html
      DEBU Writing output/tags/emacs/index.html
      DEBU Writing output/tags/snow/index.html
      DEBU Writing output/categories/index.html
      DEBU Writing output/categories/linux/index.html
      DEBU Writing output/categories/linux/emacs/index.html
      DEBU Writing output/index.html
      INFO Done: Section Processed 1 posts in 4.381323ms
      INFO Done: Taxonomy Processed 1 authors, 3 tags, 1 categories in 4.391732ms
      INFO Listen 127.0.0.1:8000 ...
    #+end_example

** 内容
*** Section
    #+begin_example
      content/
      ├── drafts            // <- http://127.0.0.1:8000/drafts/index.html
      │   └── draft1.org    // <- http://127.0.0.1:8000/drafts/index.html
      ├── pages             // no url, because sections.pages.path is ""
      │   └── 404.org       // <- http://127.0.0.1:8000/404.html
      └── posts             // <- http://127.0.0.1:8000/posts/index.html
          ├── post1.org     // <- http://127.0.0.1:8000/posts/2022/02/post1.html
          └── subposts      // <- http://127.0.0.1:8000/posts/subposts/index.html
              └── post2.org // <- http://127.0.0.1:8000/posts/2023/02/post2.html
    #+end_example
**** 配置
     #+begin_src yaml
     sections:
       _default:
         # 页面中文章的默认排序, 多字段使用逗号分隔
         orderby: "date desc"
         # 文章筛选，主要用于分页前
         filter: ""
         # 页面中文章默认分页, path必须使用{number}变量, 0表示不分页
         paginate: 10
         # 分页路径
         paginate_path: "{name}{number}{extension}"
         # 生成路径, 为空表示禁止生成相关页面
         path: "{section}/index.html"
         # 使用的模版
         template: "section.html"
         # 当前section下所有文章生成路径
         page_path: "{section}/{slug}/index.html"
         # 文章使用的模版
         page_template: "post.html"
       posts:
         page_path: "posts/{date:%Y}/{date:%m}/{slug}.html"
       pages:
         path: ""
       pages/about:
         # 自定义pages/about下的文章生成路径，同时继承pages.path不会生成所有页面
         page_path: "{slug}/index.html"
     #+end_src
     *filter* 格式(下同):
     - 字符串格式: =type1= 表示只展示类型为type1的页面, =-type2= 表示排除类型为type1的页面, 多个类型使用英文逗号分隔
     - 字典格式:
       #+begin_src yaml
       filter:
         is_top: true
         tags: "linux,-emacs"
       #+end_src

**** 路径变量(*sections.xxx.path*)
     |-----------+------------------|
     | 变量      | 描述             |
     |-----------+------------------|
     | {section} | section名称      |
     | {number}  | 使用分页时的页码 |

     ={number}= 在第一页时会自动配置成空字符串，如果需要禁止该动作，可以使用 ={number:one}= 代替

**** 模版变量(*sections.xxx.template*)
     |-------------------+-------------------------|
     | 变量              | 描述                    |
     |-------------------+-------------------------|
     | section           |                         |
     | section.Title     | section标题             |
     | section.Path      | section相对链接         |
     | section.Permalink | section绝对链接         |
     | section.Content   | section内容             |
     | section.Pages     | 当前section下的文章列表 |
     | section.Children  | 子section               |
     | section.Parent    | 父section               |

*** Page
**** 配置
     #+begin_src yaml
     # 文章目录所在, 其中该目录下应该包括一系列子目录，这些子目录的名称对应为 *文章的类型*, 比如 *content/drafts/* 目录下的文章类型为 *drafts*, 当然也可以直接在文章文件头添加 =type: drafts=
     content_dir: "content"
     # 所有类型的文章列表，当 *page_dirs* 为空时，snow将会搜索 *content* 目录下的所有子目录
     page_dirs:
       - "drafts"
       - "posts"
     #+end_src
**** 路径变量(*sections.xxx.page_path*)
     |------------+----------------------|
     | 变量       | 描述                 |
     |------------+----------------------|
     | {date:%Y}  | 创建文章的年份       |
     | {date:%m}  | 创建文章的月份       |
     | {date:%d}  | 创建文章的日期       |
     | {date:%H}  | 创建文章的小时       |
     | {slug}     | 文章标题或自定义slug |
     | {filename} | 文件名称(不带后缀名) |

**** 模版变量(*sections.xxx.page_template*)
     |----------------------+----------------------|
     | 变量                 | 描述                 |
     |----------------------+----------------------|
     | page                 |                      |
     | page.Title           | 页面标题             |
     | page.Date            | 页面创建时间         |
     | page.Modified        | 页面修改时间         |
     | page.Aliases         | 页面其它链接         |
     | page.Path            | 页面相对链接         |
     | page.Permalink       | 页面绝对链接         |
     | page.Summary         | 页面简介             |
     | page.Content         | 页面内容             |
     | page.Meta.xxx        | 自定义的元数据       |
     | page.Prev            | 上一篇               |
     | page.Next            | 下一篇               |
     | page.HasPrev()       | 是否有上一篇         |
     | page.HasNext()       | 是否有下一篇         |
     | page.PrevInType      | 同一类型上一篇       |
     | page.NextInType      | 同一类型下一篇       |
     | page.HasPrevInType() | 是否有同一类型上一篇 |
     | page.HasNextInType() | 是否有同一类型下一篇 |

*** Taxonomy
**** 配置
     #+begin_src yaml
     taxonomies:
       _default:
         path: "{taxonomy}/index.html"
         # terms排序, 可选name,count
         orderby: ""
         template: "{taxonomy}/list.html"
         term_path: "{taxonomy}/{slug}/index.html"
         term_template: "{taxonomy}/single.html"
         # 文章列表筛选
         term_filter: ""
         # 文章列表排序
         term_orderby: "date desc"
         # 文章列表分页
         term_paginate: 0
         term_paginate_path: ""
       categories:
       authors:
       tags:
     #+end_src

**** 路径变量
     - *taxonomies.xxx.path*
       |------------+--------------|
       | 变量       | 描述         |
       |------------+--------------|
       | {taxonomy} | 分类系统名称 |
     - *taxonomies.xxx.term_path*
       |------------+------------------|
       | 变量       | 描述             |
       |------------+------------------|
       | {taxonomy} | 分类系统名称     |
       | {number}   | 使用分页时的页码 |
       | {slug}     | 分类具体名称     |

**** 模版变量
     - *taxonomies.xxx.template*
       |----------------+------------------------------------------|
       | 变量           | 描述                                     |
       |----------------+------------------------------------------|
       | taxonomy       |                                          |
       | taxonomy.Name  | 分类系统名称, 如:categories,tags,authors |
       | taxonomy.Terms |                                          |
     - *taxonomies.xxx.term_template*
       |----------------+----------|
       | 变量           | 描述     |
       |----------------+----------|
       | term           |          |
       | term.Name      | 分类名称 |
       | term.Path      | 相对链接 |
       | term.Permalink | 绝对链接 |
       | term.List      | 文章列表 |
       | term.Children  | 子分类   |

*** Archive
    #+begin_src yaml
    taxonomies:
      date:2006/01:
        path: "archives/index.html"
        template: "archives.html"
        term_path: "archives/{slug}/index.html"
        term_template: "period_archives.html"
    #+end_src
    归档页面类似分类系统，其它 *date:2006/01* 表示按年月归档, 并生成链接 */archives/2022/10/index.html*

*** Pagination
**** 模版变量
     |---------------------+----------------|
     | 变量                | 描述           |
     |---------------------+----------------|
     | paginator           |                |
     | paginator.URL       | 分页链接       |
     | paginator.PageNum   | 当前页         |
     | paginator.Total     | 总页数         |
     | paginator.HasPrev() | 是否有上一页   |
     | paginator.Prev      | 上一页         |
     | paginator.Prev.URL  | 上一页链接     |
     | paginator.HasNext() | 是否有下一页   |
     | paginator.Next      | 下一页         |
     | paginator.Next.URL  | 下一页链接     |
     | paginator.All       | 所有页         |
     | paginator.List      | 当前页文章列表 |

*** Static
    静态文件配置:
    #+begin_src yaml
    # 静态文件目录, 该目录区分主题的静态文件static
    static_dirs:
      - "static/"
    # 静态文件扩展，不配置将会使用静态文件目录下的所有文件
    static_exts:
      - ".js"
      - ".css"
    # 静态文件路径，用于指定静态文件或静态目录的保存目录, 当有多条路径时，长度优先.
    static_paths:
      static/CNAME: "/"
      static/css/main.css: "static/css/"
      # 以@theme开头代表主题中的静态文件，即{theme.name}/static
      "@theme/static": "static/"
    #+end_src

*** Feed
**** 配置
     #+begin_src yaml
     sections:
       _default:
         # feed生成路径
         feed_path: "{section}/index.xml"
         # feed查找模版，为空时默认使用_internal/feed.xml
         feed_template: "rss.xml"

     taxonomies:
       _default:
         feed_path: "{taxonomy}/{slug}/index.xml"
       tags:
         # 为空时禁止生成feed
         feed_path: ""
     #+end_src
**** 模版变量
     |---------+------------------------------|
     | 变量    | 描述                         |
     |---------+------------------------------|
     | section | 仅生成section feed有效       |
     | term    | 仅生成taxonomy term feed有效 |
     | pages   | 文章列表                     |

*** theme
**** 主题目录结构
     其中 *templates* 和 *static* 名称不可修改
     #+begin_example
       simple/
       ├── templates
       │   ├── post.html
       │   ├── index.html
       │   ├── archives.html
       ├── static
       │   ├── main.css
     #+end_example
**** 配置
     #+begin_src yaml
     theme:
       # 主题名称, 未设置将使用默认主题
       name: "test-theme"
       # 主题模版覆盖, 增加同名的文件到 *override* 配置的目录, snow将会优先使用该文件
       override: "layouts"
     #+end_src

*** shortcode
    用于快速插入已有模版, 示例:
    #+begin_example
    <shortcode _name="encrypt" password="1234567">
    hello *markdown*
    </shortcode>

    <shortcode _name="gist" author="spf13" id="7896402" />
    #+end_example

    可以自定义 *shortcode* 到主题的 =templates/shortcodes= 目录下, 目前内置 *gist*, *encrypt*

*** hook
    插件接口
    #+begin_src yaml
    hooks:
      - "assets"
      - "encrypt"
      - "shortcode"

    params:
      assets:
        css:
          files:
            - "@theme/static/scss/main.scss"
            - "@theme/static/scss/entry.scss"
          filters:
            - libscss:
                path: ["@theme/static/scss/"]
            - cssmin:
          output: "static/lib.min.css"
          retain: true
    #+end_src

*** 本地测试和正式发布
    snow 提供了 *mode* 配置用于区分本地测试和正式发布
    #+begin_src yaml :noindent
    site:
      url: "http://127.0.0.1:8000"
      output_dir: "output"

    mode.publish:
      site:
        url: "https://example.com"
        output_dir: "xxx"

    mode.develop:
      include: "develop.yaml"
    #+end_src
    只要在构建时使用 =snow build --mode publish= 即可覆盖本地默认配置
